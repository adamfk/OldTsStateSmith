//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar1.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class Grammar1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WORD=10, LINE_ENDER=11, TRIGGER_SIMPLE=12, ORDER=13, LINE_COMMENT=14, 
		ML_COMMENT=15, CODE_IDENTIFIER=16, ESCAPED_CHAR=17, CHAR_LITERAL=18, STRING_CHAR=19, 
		CODE_SYMBOLS=20, WS=21;
	public const int
		RULE_state_name = 0, RULE_trigger_list = 1, RULE_triggers = 2, RULE_guard = 3, 
		RULE_action = 4, RULE_braced_action = 5, RULE_naked_action = 6, RULE_behavior = 7, 
		RULE_string = 8, RULE_group_expression = 9, RULE_square_brace_expression = 10, 
		RULE_braced_expression = 11, RULE_code_expression = 12;
	public static readonly string[] ruleNames = {
		"state_name", "trigger_list", "triggers", "guard", "action", "braced_action", 
		"naked_action", "behavior", "string", "group_expression", "square_brace_expression", 
		"braced_expression", "code_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'['", "']'", "'/'", "'{'", "'}'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WORD", "LINE_ENDER", 
		"TRIGGER_SIMPLE", "ORDER", "LINE_COMMENT", "ML_COMMENT", "CODE_IDENTIFIER", 
		"ESCAPED_CHAR", "CHAR_LITERAL", "STRING_CHAR", "CODE_SYMBOLS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Grammar1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Grammar1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Grammar1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class State_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Grammar1Parser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER() { return GetToken(Grammar1Parser.LINE_ENDER, 0); }
		public State_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterState_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitState_name(this);
		}
	}

	[RuleVersion(0)]
	public State_nameContext state_name() {
		State_nameContext _localctx = new State_nameContext(Context, State);
		EnterRule(_localctx, 0, RULE_state_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(WORD);
			State = 27;
			Match(LINE_ENDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRIGGER_SIMPLE() { return GetTokens(Grammar1Parser.TRIGGER_SIMPLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SIMPLE(int i) {
			return GetToken(Grammar1Parser.TRIGGER_SIMPLE, i);
		}
		public Trigger_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterTrigger_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitTrigger_list(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_listContext trigger_list() {
		Trigger_listContext _localctx = new Trigger_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_trigger_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(T__0);
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRIGGER_SIMPLE:
				{
				State = 30;
				Match(TRIGGER_SIMPLE);
				}
				break;
			case T__1:
			case T__2:
				{
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 31;
					Match(T__1);
					State = 32;
					Match(TRIGGER_SIMPLE);
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 40;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SIMPLE() { return GetToken(Grammar1Parser.TRIGGER_SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trigger_listContext trigger_list() {
			return GetRuleContext<Trigger_listContext>(0);
		}
		public TriggersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterTriggers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitTriggers(this);
		}
	}

	[RuleVersion(0)]
	public TriggersContext triggers() {
		TriggersContext _localctx = new TriggersContext(Context, State);
		EnterRule(_localctx, 4, RULE_triggers);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRIGGER_SIMPLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(TRIGGER_SIMPLE);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				trigger_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext code_expression() {
			return GetRuleContext<Code_expressionContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 6, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(T__3);
			State = 47;
			code_expression();
			State = 48;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Braced_actionContext braced_action() {
			return GetRuleContext<Braced_actionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naked_actionContext naked_action() {
			return GetRuleContext<Naked_actionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 8, RULE_action);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				braced_action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				naked_action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Braced_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext code_expression() {
			return GetRuleContext<Code_expressionContext>(0);
		}
		public Braced_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braced_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBraced_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBraced_action(this);
		}
	}

	[RuleVersion(0)]
	public Braced_actionContext braced_action() {
		Braced_actionContext _localctx = new Braced_actionContext(Context, State);
		EnterRule(_localctx, 10, RULE_braced_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__5);
			State = 55;
			Match(T__6);
			State = 56;
			code_expression();
			State = 57;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naked_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext code_expression() {
			return GetRuleContext<Code_expressionContext>(0);
		}
		public Naked_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naked_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterNaked_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitNaked_action(this);
		}
	}

	[RuleVersion(0)]
	public Naked_actionContext naked_action() {
		Naked_actionContext _localctx = new Naked_actionContext(Context, State);
		EnterRule(_localctx, 12, RULE_naked_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(T__5);
			State = 60;
			code_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(Grammar1Parser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggersContext triggers() {
			return GetRuleContext<TriggersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBehavior(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorContext behavior() {
		BehaviorContext _localctx = new BehaviorContext(Context, State);
		EnterRule(_localctx, 14, RULE_behavior);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 62;
				Match(ORDER);
				}
			}

			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==TRIGGER_SIMPLE) {
				{
				State = 65;
				triggers();
				}
			}

			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 68;
				guard();
				}
			}

			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 71;
				action();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_CHAR() { return GetTokens(Grammar1Parser.STRING_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHAR(int i) {
			return GetToken(Grammar1Parser.STRING_CHAR, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 16, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__8);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING_CHAR) {
				{
				{
				State = 75;
				Match(STRING_CHAR);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext[] code_expression() {
			return GetRuleContexts<Code_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext code_expression(int i) {
			return GetRuleContext<Code_expressionContext>(i);
		}
		public Group_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterGroup_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitGroup_expression(this);
		}
	}

	[RuleVersion(0)]
	public Group_expressionContext group_expression() {
		Group_expressionContext _localctx = new Group_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_group_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(T__0);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__6) | (1L << T__8) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 84;
				code_expression();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_brace_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext[] code_expression() {
			return GetRuleContexts<Code_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext code_expression(int i) {
			return GetRuleContext<Code_expressionContext>(i);
		}
		public Square_brace_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_brace_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterSquare_brace_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitSquare_brace_expression(this);
		}
	}

	[RuleVersion(0)]
	public Square_brace_expressionContext square_brace_expression() {
		Square_brace_expressionContext _localctx = new Square_brace_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_square_brace_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(T__3);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__6) | (1L << T__8) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 93;
				code_expression();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Braced_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext[] code_expression() {
			return GetRuleContexts<Code_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_expressionContext code_expression(int i) {
			return GetRuleContext<Code_expressionContext>(i);
		}
		public Braced_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braced_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBraced_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBraced_expression(this);
		}
	}

	[RuleVersion(0)]
	public Braced_expressionContext braced_expression() {
		Braced_expressionContext _localctx = new Braced_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_braced_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__6);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__6) | (1L << T__8) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 102;
				code_expression();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT() { return GetToken(Grammar1Parser.LINE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ML_COMMENT() { return GetToken(Grammar1Parser.ML_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(Grammar1Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_IDENTIFIER() { return GetToken(Grammar1Parser.CODE_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOLS() { return GetToken(Grammar1Parser.CODE_SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_expressionContext group_expression() {
			return GetRuleContext<Group_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Square_brace_expressionContext square_brace_expression() {
			return GetRuleContext<Square_brace_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Braced_expressionContext braced_expression() {
			return GetRuleContext<Braced_expressionContext>(0);
		}
		public Code_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterCode_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitCode_expression(this);
		}
	}

	[RuleVersion(0)]
	public Code_expressionContext code_expression() {
		Code_expressionContext _localctx = new Code_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_code_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LINE_COMMENT:
				{
				State = 110;
				Match(LINE_COMMENT);
				}
				break;
			case ML_COMMENT:
				{
				State = 111;
				Match(ML_COMMENT);
				}
				break;
			case CHAR_LITERAL:
				{
				State = 112;
				Match(CHAR_LITERAL);
				}
				break;
			case T__8:
				{
				State = 113;
				@string();
				}
				break;
			case CODE_IDENTIFIER:
				{
				State = 114;
				Match(CODE_IDENTIFIER);
				}
				break;
			case CODE_SYMBOLS:
				{
				State = 115;
				Match(CODE_SYMBOLS);
				}
				break;
			case T__0:
				{
				State = 116;
				group_expression();
				}
				break;
			case T__3:
				{
				State = 117;
				square_brace_expression();
				}
				break;
			case T__6:
				{
				State = 118;
				braced_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', '|', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '$', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\'', '\v', '\x3', '\x5', '\x3', ')', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'/', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x37', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', '\t', '\x42', '\n', '\t', 
		'\x3', '\t', '\x5', '\t', '\x45', '\n', '\t', '\x3', '\t', '\x5', '\t', 
		'H', '\n', '\t', '\x3', '\t', '\x5', '\t', 'K', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'O', '\n', '\n', '\f', '\n', '\xE', '\n', 'R', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', 'X', '\n', '\v', '\f', '\v', '\xE', '\v', '[', '\v', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x61', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\x64', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\a', '\r', 'j', '\n', '\r', '\f', '\r', 
		'\xE', '\r', 'm', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'z', '\n', '\xE', 
		'\x3', '\xE', '\x2', '\x2', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x2', '\x2', 
		'\x82', '\x2', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', '\b', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x38', '\x3', '\x2', '\x2', '\x2', '\xE', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x41', '\x3', '\x2', '\x2', '\x2', '\x12', 'L', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'U', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x18', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', 'y', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\f', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '\r', '\x2', '\x2', '\x1E', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '(', '\a', '\x3', '\x2', '\x2', ' ', ')', 
		'\a', '\xE', '\x2', '\x2', '!', '\"', '\a', '\x4', '\x2', '\x2', '\"', 
		'$', '\a', '\xE', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', 
		'\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ' ', '\x3', '\x2', 
		'\x2', '\x2', '(', '%', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '\x5', '\x2', '\x2', '+', '\x5', '\x3', 
		'\x2', '\x2', '\x2', ',', '/', '\a', '\xE', '\x2', '\x2', '-', '/', '\x5', 
		'\x4', '\x3', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x6', '\x2', '\x2', '\x31', '\x32', '\x5', '\x1A', '\xE', '\x2', 
		'\x32', '\x33', '\a', '\a', '\x2', '\x2', '\x33', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x5', '\f', '\a', '\x2', '\x35', '\x37', 
		'\x5', '\xE', '\b', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\b', '\x2', '\x2', '\x39', ':', '\a', 
		'\t', '\x2', '\x2', ':', ';', '\x5', '\x1A', '\xE', '\x2', ';', '<', '\a', 
		'\n', '\x2', '\x2', '<', '\r', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', 
		'\b', '\x2', '\x2', '>', '?', '\x5', '\x1A', '\xE', '\x2', '?', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x42', '\a', '\xF', '\x2', '\x2', '\x41', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x5', 
		'\x6', '\x4', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'H', '\x5', '\b', '\x5', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'K', '\x5', '\n', '\x6', '\x2', 'J', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'P', '\a', '\v', '\x2', '\x2', 'M', 'O', '\a', 
		'\x15', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\v', '\x2', '\x2', 
		'T', '\x13', '\x3', '\x2', '\x2', '\x2', 'U', 'Y', '\a', '\x3', '\x2', 
		'\x2', 'V', 'X', '\x5', '\x1A', '\xE', '\x2', 'W', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\a', '\x5', '\x2', '\x2', ']', '\x15', '\x3', '\x2', '\x2', '\x2', '^', 
		'\x62', '\a', '\x6', '\x2', '\x2', '_', '\x61', '\x5', '\x1A', '\xE', 
		'\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\a', 
		'\x2', '\x2', '\x66', '\x17', '\x3', '\x2', '\x2', '\x2', 'g', 'k', '\a', 
		'\t', '\x2', '\x2', 'h', 'j', '\x5', '\x1A', '\xE', '\x2', 'i', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', 
		'\n', '\x2', '\x2', 'o', '\x19', '\x3', '\x2', '\x2', '\x2', 'p', 'z', 
		'\a', '\x10', '\x2', '\x2', 'q', 'z', '\a', '\x11', '\x2', '\x2', 'r', 
		'z', '\a', '\x14', '\x2', '\x2', 's', 'z', '\x5', '\x12', '\n', '\x2', 
		't', 'z', '\a', '\x12', '\x2', '\x2', 'u', 'z', '\a', '\x16', '\x2', '\x2', 
		'v', 'z', '\x5', '\x14', '\v', '\x2', 'w', 'z', '\x5', '\x16', '\f', '\x2', 
		'x', 'z', '\x5', '\x18', '\r', '\x2', 'y', 'p', '\x3', '\x2', '\x2', '\x2', 
		'y', 'q', '\x3', '\x2', '\x2', '\x2', 'y', 'r', '\x3', '\x2', '\x2', '\x2', 
		'y', 's', '\x3', '\x2', '\x2', '\x2', 'y', 't', '\x3', '\x2', '\x2', '\x2', 
		'y', 'u', '\x3', '\x2', '\x2', '\x2', 'y', 'v', '\x3', '\x2', '\x2', '\x2', 
		'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF', '%', '(', '.', '\x36', 
		'\x41', '\x44', 'G', 'J', 'P', 'Y', '\x62', 'k', 'y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
