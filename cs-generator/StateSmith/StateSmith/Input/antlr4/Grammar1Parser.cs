//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar1.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class Grammar1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, Trigger_list=8, 
		Triggers=9, ORDER=10, LINE_COMMENT=11, ML_COMMENT=12, CODE_IDENTIFIER=13, 
		CHAR_LITERAL=14, STRING=15, CODE_SYMBOLS=16, LINE_ENDER=17, WS=18, WORD=19;
	public const int
		RULE_state_defn = 0, RULE_state_name = 1, RULE_behaviors = 2, RULE_behavior = 3, 
		RULE_guard = 4, RULE_action = 5, RULE_braced_action = 6, RULE_naked_action = 7, 
		RULE_group_expression = 8, RULE_square_brace_expression = 9, RULE_braced_expression = 10, 
		RULE_code_elements = 11, RULE_code_element = 12;
	public static readonly string[] ruleNames = {
		"state_defn", "state_name", "behaviors", "behavior", "guard", "action", 
		"braced_action", "naked_action", "group_expression", "square_brace_expression", 
		"braced_expression", "code_elements", "code_element"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'/'", "'{'", "'}'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "Trigger_list", "Triggers", 
		"ORDER", "LINE_COMMENT", "ML_COMMENT", "CODE_IDENTIFIER", "CHAR_LITERAL", 
		"STRING", "CODE_SYMBOLS", "LINE_ENDER", "WS", "WORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Grammar1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Grammar1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Grammar1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class State_defnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public State_nameContext state_name() {
			return GetRuleContext<State_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Grammar1Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorsContext behaviors() {
			return GetRuleContext<BehaviorsContext>(0);
		}
		public State_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_defn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterState_defn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitState_defn(this);
		}
	}

	[RuleVersion(0)]
	public State_defnContext state_defn() {
		State_defnContext _localctx = new State_defnContext(Context, State);
		EnterRule(_localctx, 0, RULE_state_defn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			state_name();
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINE_ENDER) {
				{
				State = 27;
				behaviors();
				}
			}

			State = 30;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(Grammar1Parser.WORD, 0); }
		public State_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterState_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitState_name(this);
		}
	}

	[RuleVersion(0)]
	public State_nameContext state_name() {
		State_nameContext _localctx = new State_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_state_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(Grammar1Parser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(Grammar1Parser.LINE_ENDER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorContext[] behavior() {
			return GetRuleContexts<BehaviorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorContext behavior(int i) {
			return GetRuleContext<BehaviorContext>(i);
		}
		public BehaviorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBehaviors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBehaviors(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorsContext behaviors() {
		BehaviorsContext _localctx = new BehaviorsContext(Context, State);
		EnterRule(_localctx, 4, RULE_behaviors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(LINE_ENDER);
			State = 35;
			behavior();
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_ENDER) {
				{
				{
				State = 36;
				Match(LINE_ENDER);
				State = 37;
				behavior();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER() { return GetToken(Grammar1Parser.LINE_ENDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(Grammar1Parser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Triggers() { return GetToken(Grammar1Parser.Triggers, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBehavior(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorContext behavior() {
		BehaviorContext _localctx = new BehaviorContext(Context, State);
		EnterRule(_localctx, 6, RULE_behavior);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 43;
				Match(ORDER);
				}
			}

			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Triggers) {
				{
				State = 46;
				Match(Triggers);
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 49;
				guard();
				}
			}

			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 52;
				action();
				}
			}

			State = 55;
			Match(LINE_ENDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements() {
			return GetRuleContext<Code_elementsContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 8, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(T__0);
			State = 58;
			code_elements();
			State = 59;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Braced_actionContext braced_action() {
			return GetRuleContext<Braced_actionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naked_actionContext naked_action() {
			return GetRuleContext<Naked_actionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_action);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				braced_action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				naked_action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Braced_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Braced_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braced_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBraced_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBraced_action(this);
		}
	}

	[RuleVersion(0)]
	public Braced_actionContext braced_action() {
		Braced_actionContext _localctx = new Braced_actionContext(Context, State);
		EnterRule(_localctx, 12, RULE_braced_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__2);
			State = 66;
			Match(T__3);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 67;
				code_elements();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naked_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Naked_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naked_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterNaked_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitNaked_action(this);
		}
	}

	[RuleVersion(0)]
	public Naked_actionContext naked_action() {
		Naked_actionContext _localctx = new Naked_actionContext(Context, State);
		EnterRule(_localctx, 14, RULE_naked_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__2);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 76;
				code_elements();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Group_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterGroup_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitGroup_expression(this);
		}
	}

	[RuleVersion(0)]
	public Group_expressionContext group_expression() {
		Group_expressionContext _localctx = new Group_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_group_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__5);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 83;
				code_elements();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_brace_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Square_brace_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_brace_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterSquare_brace_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitSquare_brace_expression(this);
		}
	}

	[RuleVersion(0)]
	public Square_brace_expressionContext square_brace_expression() {
		Square_brace_expressionContext _localctx = new Square_brace_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_square_brace_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__0);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 92;
				code_elements();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Braced_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Braced_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braced_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBraced_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBraced_expression(this);
		}
	}

	[RuleVersion(0)]
	public Braced_expressionContext braced_expression() {
		Braced_expressionContext _localctx = new Braced_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_braced_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__3);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CODE_IDENTIFIER) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 101;
				code_elements();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementContext[] code_element() {
			return GetRuleContexts<Code_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementContext code_element(int i) {
			return GetRuleContext<Code_elementContext>(i);
		}
		public Code_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterCode_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitCode_elements(this);
		}
	}

	[RuleVersion(0)]
	public Code_elementsContext code_elements() {
		Code_elementsContext _localctx = new Code_elementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_code_elements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 109;
					code_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT() { return GetToken(Grammar1Parser.LINE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ML_COMMENT() { return GetToken(Grammar1Parser.ML_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(Grammar1Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Grammar1Parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_IDENTIFIER() { return GetToken(Grammar1Parser.CODE_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOLS() { return GetToken(Grammar1Parser.CODE_SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_expressionContext group_expression() {
			return GetRuleContext<Group_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Square_brace_expressionContext square_brace_expression() {
			return GetRuleContext<Square_brace_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Braced_expressionContext braced_expression() {
			return GetRuleContext<Braced_expressionContext>(0);
		}
		public Code_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterCode_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitCode_element(this);
		}
	}

	[RuleVersion(0)]
	public Code_elementContext code_element() {
		Code_elementContext _localctx = new Code_elementContext(Context, State);
		EnterRule(_localctx, 24, RULE_code_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LINE_COMMENT:
				{
				State = 114;
				Match(LINE_COMMENT);
				}
				break;
			case ML_COMMENT:
				{
				State = 115;
				Match(ML_COMMENT);
				}
				break;
			case CHAR_LITERAL:
				{
				State = 116;
				Match(CHAR_LITERAL);
				}
				break;
			case STRING:
				{
				State = 117;
				Match(STRING);
				}
				break;
			case CODE_IDENTIFIER:
				{
				State = 118;
				Match(CODE_IDENTIFIER);
				}
				break;
			case CODE_SYMBOLS:
				{
				State = 119;
				Match(CODE_SYMBOLS);
				}
				break;
			case T__5:
				{
				State = 120;
				group_expression();
				}
				break;
			case T__0:
				{
				State = 121;
				square_brace_expression();
				}
				break;
			case T__3:
				{
				State = 122;
				braced_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x80', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1F', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', ')', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', ',', '\v', '\x4', '\x3', '\x5', '\x5', '\x5', 
		'/', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x32', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x35', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x38', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x42', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'G', '\n', '\b', '\f', '\b', '\xE', '\b', 'J', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', 'P', '\n', '\t', '\f', 
		'\t', '\xE', '\t', 'S', '\v', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'W', '\n', '\n', '\f', '\n', '\xE', '\n', 'Z', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', '`', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x63', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', 'i', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'l', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', 'q', 
		'\n', '\r', '\r', '\r', '\xE', '\r', 'r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '~', '\n', '\xE', '\x3', '\xE', 
		'\x2', '\x2', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x2', '\x2', '\x87', '\x2', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '$', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', 
		'\x2', '\x2', '\n', ';', '\x3', '\x2', '\x2', '\x2', '\f', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x43', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x14', ']', '\x3', '\x2', '\x2', '\x2', '\x16', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'p', '\x3', '\x2', '\x2', '\x2', '\x1A', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', '\x4', '\x3', '\x2', '\x1D', 
		'\x1F', '\x5', '\x6', '\x4', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\a', '\x2', '\x2', '\x3', '!', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x15', '\x2', '\x2', '#', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x13', '\x2', '\x2', 
		'%', '*', '\x5', '\b', '\x5', '\x2', '&', '\'', '\a', '\x13', '\x2', '\x2', 
		'\'', ')', '\x5', '\b', '\x5', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', 
		')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\a', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '/', '\a', '\f', '\x2', 
		'\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\a', 
		'\v', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x35', '\x5', '\n', '\x6', '\x2', '\x34', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x5', '\f', '\a', 
		'\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', '\x13', '\x2', '\x2', ':', '\t', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\a', '\x3', '\x2', '\x2', '<', '=', '\x5', '\x18', '\r', '\x2', 
		'=', '>', '\a', '\x4', '\x2', '\x2', '>', '\v', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x42', '\x5', '\xE', '\b', '\x2', '@', '\x42', '\x5', '\x10', '\t', 
		'\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\r', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\a', '\x5', '\x2', '\x2', '\x44', 'H', '\a', '\x6', '\x2', '\x2', '\x45', 
		'G', '\x5', '\x18', '\r', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\a', 
		'\x2', '\x2', 'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 'Q', '\a', 
		'\x5', '\x2', '\x2', 'N', 'P', '\x5', '\x18', '\r', '\x2', 'O', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 
		'X', '\a', '\b', '\x2', '\x2', 'U', 'W', '\x5', '\x18', '\r', '\x2', 'V', 
		'U', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\a', '\t', '\x2', '\x2', '\\', '\x13', '\x3', '\x2', '\x2', 
		'\x2', ']', '\x61', '\a', '\x3', '\x2', '\x2', '^', '`', '\x5', '\x18', 
		'\r', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x4', '\x2', '\x2', '\x65', '\x15', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'j', '\a', '\x6', '\x2', '\x2', 'g', 'i', '\x5', '\x18', '\r', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 
		'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\a', '\x2', '\x2', 'n', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'q', '\x5', '\x1A', '\xE', '\x2', 'p', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 't', '~', '\a', '\r', '\x2', '\x2', 'u', '~', '\a', 
		'\xE', '\x2', '\x2', 'v', '~', '\a', '\x10', '\x2', '\x2', 'w', '~', '\a', 
		'\x11', '\x2', '\x2', 'x', '~', '\a', '\xF', '\x2', '\x2', 'y', '~', '\a', 
		'\x12', '\x2', '\x2', 'z', '~', '\x5', '\x12', '\n', '\x2', '{', '~', 
		'\x5', '\x14', '\v', '\x2', '|', '~', '\x5', '\x16', '\f', '\x2', '}', 
		't', '\x3', '\x2', '\x2', '\x2', '}', 'u', '\x3', '\x2', '\x2', '\x2', 
		'}', 'v', '\x3', '\x2', '\x2', '\x2', '}', 'w', '\x3', '\x2', '\x2', '\x2', 
		'}', 'x', '\x3', '\x2', '\x2', '\x2', '}', 'y', '\x3', '\x2', '\x2', '\x2', 
		'}', 'z', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', 
		'}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x1E', '*', '.', '\x31', '\x34', '\x37', '\x41', 'H', 
		'Q', 'X', '\x61', 'j', 'r', '}',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
