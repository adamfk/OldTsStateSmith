//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar1.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class Grammar1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LINE_ENDER=9, 
		WS=10, IDENTIFIER=11, DIGIT=12, TRIGGER_LIST=13, LINE_COMMENT=14, ML_COMMENT=15, 
		CHAR_LITERAL=16, STRING=17, CODE_SYMBOLS=18;
	public const int
		RULE_state_defn = 0, RULE_state_name = 1, RULE_behaviors = 2, RULE_behavior = 3, 
		RULE_triggers = 4, RULE_order = 5, RULE_guard = 6, RULE_action = 7, RULE_braced_action = 8, 
		RULE_naked_action = 9, RULE_group_expression = 10, RULE_square_brace_expression = 11, 
		RULE_braced_expression = 12, RULE_code_elements = 13, RULE_code_element = 14;
	public static readonly string[] ruleNames = {
		"state_defn", "state_name", "behaviors", "behavior", "triggers", "order", 
		"guard", "action", "braced_action", "naked_action", "group_expression", 
		"square_brace_expression", "braced_expression", "code_elements", "code_element"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'['", "']'", "'/'", "'{'", "'}'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LINE_ENDER", "WS", 
		"IDENTIFIER", "DIGIT", "TRIGGER_LIST", "LINE_COMMENT", "ML_COMMENT", "CHAR_LITERAL", 
		"STRING", "CODE_SYMBOLS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Grammar1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Grammar1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Grammar1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class State_defnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public State_nameContext state_name() {
			return GetRuleContext<State_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Grammar1Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorsContext behaviors() {
			return GetRuleContext<BehaviorsContext>(0);
		}
		public State_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_defn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterState_defn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitState_defn(this);
		}
	}

	[RuleVersion(0)]
	public State_defnContext state_defn() {
		State_defnContext _localctx = new State_defnContext(Context, State);
		EnterRule(_localctx, 0, RULE_state_defn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			state_name();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINE_ENDER) {
				{
				State = 31;
				behaviors();
				}
			}

			State = 34;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Grammar1Parser.IDENTIFIER, 0); }
		public State_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterState_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitState_name(this);
		}
	}

	[RuleVersion(0)]
	public State_nameContext state_name() {
		State_nameContext _localctx = new State_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_state_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(Grammar1Parser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(Grammar1Parser.LINE_ENDER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorContext[] behavior() {
			return GetRuleContexts<BehaviorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BehaviorContext behavior(int i) {
			return GetRuleContext<BehaviorContext>(i);
		}
		public BehaviorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBehaviors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBehaviors(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorsContext behaviors() {
		BehaviorsContext _localctx = new BehaviorsContext(Context, State);
		EnterRule(_localctx, 4, RULE_behaviors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(LINE_ENDER);
			State = 39;
			behavior();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_ENDER) {
				{
				{
				State = 40;
				Match(LINE_ENDER);
				State = 41;
				behavior();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER() { return GetToken(Grammar1Parser.LINE_ENDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggersContext triggers() {
			return GetRuleContext<TriggersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBehavior(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorContext behavior() {
		BehaviorContext _localctx = new BehaviorContext(Context, State);
		EnterRule(_localctx, 6, RULE_behavior);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIGIT) {
				{
				State = 47;
				order();
				}
			}

			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER || _la==TRIGGER_LIST) {
				{
				State = 50;
				triggers();
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 53;
				guard();
				}
			}

			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 56;
				action();
				}
			}

			State = 59;
			Match(LINE_ENDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Grammar1Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_LIST() { return GetToken(Grammar1Parser.TRIGGER_LIST, 0); }
		public TriggersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterTriggers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitTriggers(this);
		}
	}

	[RuleVersion(0)]
	public TriggersContext triggers() {
		TriggersContext _localctx = new TriggersContext(Context, State);
		EnterRule(_localctx, 8, RULE_triggers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==TRIGGER_LIST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(Grammar1Parser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(Grammar1Parser.DIGIT, i);
		}
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitOrder(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 10, RULE_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 63;
				Match(DIGIT);
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 68;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements() {
			return GetRuleContext<Code_elementsContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 12, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__1);
			State = 71;
			code_elements();
			State = 72;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Braced_actionContext braced_action() {
			return GetRuleContext<Braced_actionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naked_actionContext naked_action() {
			return GetRuleContext<Naked_actionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 14, RULE_action);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				braced_action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				naked_action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Braced_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Braced_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braced_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBraced_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBraced_action(this);
		}
	}

	[RuleVersion(0)]
	public Braced_actionContext braced_action() {
		Braced_actionContext _localctx = new Braced_actionContext(Context, State);
		EnterRule(_localctx, 16, RULE_braced_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(T__3);
			State = 79;
			Match(T__4);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << IDENTIFIER) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 80;
				code_elements();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naked_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Naked_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naked_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterNaked_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitNaked_action(this);
		}
	}

	[RuleVersion(0)]
	public Naked_actionContext naked_action() {
		Naked_actionContext _localctx = new Naked_actionContext(Context, State);
		EnterRule(_localctx, 18, RULE_naked_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__3);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << IDENTIFIER) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 89;
				code_elements();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Group_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterGroup_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitGroup_expression(this);
		}
	}

	[RuleVersion(0)]
	public Group_expressionContext group_expression() {
		Group_expressionContext _localctx = new Group_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_group_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(T__6);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << IDENTIFIER) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 96;
				code_elements();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_brace_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Square_brace_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_brace_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterSquare_brace_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitSquare_brace_expression(this);
		}
	}

	[RuleVersion(0)]
	public Square_brace_expressionContext square_brace_expression() {
		Square_brace_expressionContext _localctx = new Square_brace_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_square_brace_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__1);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << IDENTIFIER) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 105;
				code_elements();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 111;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Braced_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext[] code_elements() {
			return GetRuleContexts<Code_elementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementsContext code_elements(int i) {
			return GetRuleContext<Code_elementsContext>(i);
		}
		public Braced_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braced_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterBraced_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitBraced_expression(this);
		}
	}

	[RuleVersion(0)]
	public Braced_expressionContext braced_expression() {
		Braced_expressionContext _localctx = new Braced_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_braced_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__4);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << IDENTIFIER) | (1L << LINE_COMMENT) | (1L << ML_COMMENT) | (1L << CHAR_LITERAL) | (1L << STRING) | (1L << CODE_SYMBOLS))) != 0)) {
				{
				{
				State = 114;
				code_elements();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementContext[] code_element() {
			return GetRuleContexts<Code_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_elementContext code_element(int i) {
			return GetRuleContext<Code_elementContext>(i);
		}
		public Code_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterCode_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitCode_elements(this);
		}
	}

	[RuleVersion(0)]
	public Code_elementsContext code_elements() {
		Code_elementsContext _localctx = new Code_elementsContext(Context, State);
		EnterRule(_localctx, 26, RULE_code_elements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 122;
					code_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT() { return GetToken(Grammar1Parser.LINE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ML_COMMENT() { return GetToken(Grammar1Parser.ML_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(Grammar1Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(Grammar1Parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Grammar1Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOLS() { return GetToken(Grammar1Parser.CODE_SYMBOLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_expressionContext group_expression() {
			return GetRuleContext<Group_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Square_brace_expressionContext square_brace_expression() {
			return GetRuleContext<Square_brace_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Braced_expressionContext braced_expression() {
			return GetRuleContext<Braced_expressionContext>(0);
		}
		public Code_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.EnterCode_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammar1Listener typedListener = listener as IGrammar1Listener;
			if (typedListener != null) typedListener.ExitCode_element(this);
		}
	}

	[RuleVersion(0)]
	public Code_elementContext code_element() {
		Code_elementContext _localctx = new Code_elementContext(Context, State);
		EnterRule(_localctx, 28, RULE_code_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LINE_COMMENT:
				{
				State = 127;
				Match(LINE_COMMENT);
				}
				break;
			case ML_COMMENT:
				{
				State = 128;
				Match(ML_COMMENT);
				}
				break;
			case CHAR_LITERAL:
				{
				State = 129;
				Match(CHAR_LITERAL);
				}
				break;
			case STRING:
				{
				State = 130;
				Match(STRING);
				}
				break;
			case IDENTIFIER:
				{
				State = 131;
				Match(IDENTIFIER);
				}
				break;
			case CODE_SYMBOLS:
				{
				State = 132;
				Match(CODE_SYMBOLS);
				}
				break;
			case T__6:
				{
				State = 133;
				group_expression();
				}
				break;
			case T__1:
				{
				State = 134;
				square_brace_expression();
				}
				break;
			case T__4:
				{
				State = 135;
				braced_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '\x8D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '-', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x30', '\v', '\x4', '\x3', '\x5', '\x5', '\x5', '\x33', '\n', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x36', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x39', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '<', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x6', '\a', '\x43', '\n', '\a', '\r', '\a', '\xE', '\a', '\x44', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'O', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', 'T', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'W', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', ']', '\n', '\v', '\f', '\v', '\xE', '\v', '`', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\x64', '\n', '\f', '\f', '\f', 
		'\xE', '\f', 'g', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', 'm', '\n', '\r', '\f', '\r', '\xE', '\r', 'p', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'v', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 'y', '\v', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x6', '\xF', '~', '\n', '\xF', '\r', 
		'\xF', '\xE', '\xF', '\x7F', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x8B', '\n', '\x10', '\x3', '\x10', '\x2', 
		'\x2', '\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', '\x3', '\x4', '\x2', 
		'\r', '\r', '\xF', '\xF', '\x2', '\x93', '\x2', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '&', '\x3', '\x2', '\x2', '\x2', '\x6', '(', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', '?', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x42', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x10', 'N', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'P', '\x3', '\x2', '\x2', '\x2', '\x14', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x61', '\x3', '\x2', '\x2', '\x2', '\x18', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 's', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x5', '\x4', '\x3', '\x2', '!', '#', '\x5', '\x6', 
		'\x4', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', 
		'\x2', '\x2', '\x3', '%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\a', '\r', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\a', '\v', '\x2', '\x2', ')', '.', '\x5', '\b', '\x5', '\x2', '*', 
		'+', '\a', '\v', '\x2', '\x2', '+', '-', '\x5', '\b', '\x5', '\x2', ',', 
		'*', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x33', '\x5', '\f', '\a', '\x2', '\x32', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x5', '\n', '\x6', 
		'\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x39', '\x5', '\xE', '\b', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', 
		'\x2', '\x2', '\x2', ':', '<', '\x5', '\x10', '\t', '\x2', ';', ':', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\a', '\v', '\x2', '\x2', '>', '\t', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\t', '\x2', '\x2', '\x2', '@', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x43', '\a', '\xE', '\x2', '\x2', '\x42', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\a', '\x3', '\x2', '\x2', 'G', '\r', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\x4', '\x2', '\x2', 'I', 'J', '\x5', '\x1C', '\xF', '\x2', 
		'J', 'K', '\a', '\x5', '\x2', '\x2', 'K', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'O', '\x5', '\x12', '\n', '\x2', 'M', 'O', '\x5', '\x14', 
		'\v', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', '\x11', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', 
		'\x6', '\x2', '\x2', 'Q', 'U', '\a', '\a', '\x2', '\x2', 'R', 'T', '\x5', 
		'\x1C', '\xF', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', 
		'\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 
		'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\b', '\x2', '\x2', 
		'Y', '\x13', '\x3', '\x2', '\x2', '\x2', 'Z', '^', '\a', '\x6', '\x2', 
		'\x2', '[', ']', '\x5', '\x1C', '\xF', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x65', '\a', '\t', '\x2', '\x2', '\x62', '\x64', '\x5', '\x1C', '\xF', 
		'\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\n', 
		'\x2', '\x2', 'i', '\x17', '\x3', '\x2', '\x2', '\x2', 'j', 'n', '\a', 
		'\x4', '\x2', '\x2', 'k', 'm', '\x5', '\x1C', '\xF', '\x2', 'l', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 
		'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '\x5', '\x2', '\x2', 'r', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 's', 'w', '\a', '\a', '\x2', '\x2', 't', 'v', '\x5', '\x1C', '\xF', 
		'\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\b', '\x2', '\x2', '{', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '|', '~', '\x5', '\x1E', '\x10', '\x2', '}', '|', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x81', '\x8B', '\a', 
		'\x10', '\x2', '\x2', '\x82', '\x8B', '\a', '\x11', '\x2', '\x2', '\x83', 
		'\x8B', '\a', '\x12', '\x2', '\x2', '\x84', '\x8B', '\a', '\x13', '\x2', 
		'\x2', '\x85', '\x8B', '\a', '\r', '\x2', '\x2', '\x86', '\x8B', '\a', 
		'\x14', '\x2', '\x2', '\x87', '\x8B', '\x5', '\x16', '\f', '\x2', '\x88', 
		'\x8B', '\x5', '\x18', '\r', '\x2', '\x89', '\x8B', '\x5', '\x1A', '\xE', 
		'\x2', '\x8A', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\"', '.', '\x32', '\x35', '\x38', ';', '\x44', 'N', 'U', 
		'^', '\x65', 'n', 'w', '\x7F', '\x8A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
